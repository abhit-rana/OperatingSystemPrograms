Executable file: thread
Object file: Q1t.o
Assembly file: Q1t.s
Source file: Q1t.c

command to run the file:
make
./thread

all in b/w files created by themselves or can be compiled by individual target specified in the Makefile

1. main function starts executing
2. a new thread is created from the ongoing process with the help of pthread_create(&t1, NULL, &CalcAvg, &ch) system call by passing address of the thread variable t1 created, NULL, pointer to the function, and pointer to the char array(which stores the character corrosponding to the section) as arguments, we checks for the return value of the pthread_create system call and if the value is negative then exit system call is called and printing the error message otherwise the thread created starts its own execution.
3. in the parent process we waits for the thread created to finish its execution  by calling the pthread_join() system call which suspends the parent process until the threads finishes its execution.
4. in ongoing thread execution open system call is made to get the file descriptor and then we check for that descriptor value if it is negative then we terminates the execution by calling to exit system call 
5.after we get the file descriptor we call the read(fd, buff, 1) system call by passing file descriptor, array in which to load the read value and 1 as no of bytes to read from the file and then checks the return value by the read() function and if the return value is negative then then the process is terminated by calling the system call exit otherwise we create an float array of size 6 whose each index(ith say) will store the sum of (i+1)th assignment marks of the students. Now a while loop starts in which the function fetches the character from the file one by one and stores it into the array named arr[] until we get the new line character(coming of new line character indicates that the characters in between the two new line character which occurr at the end of the file  from the fie and as we get the new line character we then starts an inner loop which parses the read characters in the arr[] on the basis of comma character and gives the marks of a praticular student in form of tokens for the six assignments and then each of this token is added to the array storing 6 assignment marks and this procedure is repeated for all the students. after the marks of each student all assignments is added to the assignment marks array then we print the average of each assignment marks by dividing the marks accumulated in the ith index of array with the number of students in the required section and then we end the process by calling exit system call and after that the thread execution overs and then pthread_join() returns the value to the parent process of thread. value returned would be positve if the thread executes successfully otherwise it would be negative. if the positive value is returned then parent process continues execution and then creates a new thread for calculating the average of the students of the section B by passing character 'B' in the ch array as one of the arguments of the pthread_create system call and the execution inside the CalcAvg function would be the same as it happened for the first thread, for this thread also we wait in the parent process who created the child by the pthread_join() system call until it finishes the execution and it also checks the returned value by it if it is negative calls the exit system call along with printing the error message.